<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo版本升级指南</title>
    <url>/posts/3ba3be9/</url>
    <content><![CDATA[<p>Hexo 升级比较简单，老方法 npm-check、npm-upgrade、npm-update 一键三连。按以下顺序逐步执行完成后，Hexo 版本及系统插件均会升级到最新。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下指令均在Hexo目录下操作，先定位到Hexo目录</span></span><br><span class="line"><span class="comment">//查看当前版本，判断是否需要升级</span></span><br><span class="line">&gt; hexo version</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局升级hexo-cli</span></span><br><span class="line">&gt; npm i hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment">//再次查看版本，看hexo-cli是否升级成功</span></span><br><span class="line">&gt; hexo version</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装npm-check，若已安装可以跳过</span></span><br><span class="line">&gt; npm install -g npm-check</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查系统插件是否需要升级</span></span><br><span class="line">&gt; npm-check</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装npm-upgrade，若已安装可以跳过</span></span><br><span class="line">&gt; npm install -g npm-upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新package.json</span></span><br><span class="line">&gt; npm-upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新全局插件</span></span><br><span class="line">&gt; npm update -g</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新系统插件</span></span><br><span class="line">&gt; npm update --save</span><br><span class="line"></span><br><span class="line"><span class="comment">//再次查看版本，判断是否升级成功</span></span><br><span class="line">&gt; hexo version</span><br></pre></td></tr></table></figure>

<p>本文作者： novnan<br>本文链接： <a href="https://novnan.github.io/Hexo/update_hexo/">https://novnan.github.io/Hexo/update_hexo/</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MockJS笔记</title>
    <url>/posts/88131327/</url>
    <content><![CDATA[<h3 id="MockJS安装"><a href="#MockJS安装" class="headerlink" title="MockJS安装"></a>MockJS安装</h3><p><code>Npm install mockjs —save-dev</code></p>
<p>2.在src里创建mock文件夹</p>
<p>3.在mock文件夹里创建mock.js</p>
<p>4.在main.js引入mock<br>   <code>Require(‘./mock/mock.js’);</code><br>5.在mock.js开始写配置</p>
<p>   以post方式为例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//引入mockjs</span><br><span class="line">const Mock = require(&quot;mockjs&quot;);</span><br><span class="line">// 获取 mock.Random 对象</span><br><span class="line">const Random = Mock.Random;</span><br><span class="line">//使用mockjs模拟数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mock.mock(&quot;/api/login&quot;,&#x27;post&#x27;,(req, res) =&gt; &#123;</span><br><span class="line">  //当post或get请求到/api/data路由时Mock会拦截请求并返回上面的数据</span><br><span class="line">  const login = JSON.parse(req.body);</span><br><span class="line"></span><br><span class="line">  if (login.req === &quot;admin&quot; &amp;&amp; login.res === 123123) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      state: &quot;ok&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      state: &quot;error&quot;,</span><br><span class="line">      string: &quot;账号或密码错误&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//login.vue</span><br><span class="line"></span><br><span class="line">    axios</span><br><span class="line">        .post(&quot;/api/login&quot;, &#123;</span><br><span class="line">          req: &quot;admin&quot;,</span><br><span class="line">          res: 123123</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(res =&gt; &#123;</span><br><span class="line">          console.log(res);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(res =&gt; &#123;</span><br><span class="line">          alert(&quot;wrong&quot;);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>   语法格式：<a href="https://github.com/nuysoft/Mock/wiki/Mock.mock%28%29">Mock.mock</a></p>
<p>   定义接口里需要有return返回接口结果</p>
<h5 id="Mock-mock-rurl-function-options"><a href="#Mock-mock-rurl-function-options" class="headerlink" title="Mock.mock(rurl, function(options))"></a>Mock.mock(rurl, function(options))</h5><ul>
<li><pre><code>    如果是GET请求，那么要从options.url里面拿，然后自己解析出来；
</code></pre>
</li>
<li><pre><code>    如果是普通的POST请求，那么要从options.body里面拿，然后自己解析类似a=1&amp;b=2这种格式；
</code></pre>
</li>
<li><pre><code>    如果参数是JSON格式并且是POST，那么要从options.body里面拿，然后JSON.parse()再获取；
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>mockjs</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>mockjs</tag>
        <tag>模拟接口</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue、iview组件库-Dropdown 下拉菜单组件支持上下按键选中并可以回车，填充相关信息</title>
    <url>/posts/a28ce290/</url>
    <content><![CDATA[<h2 id="Dropdown-下拉菜单组件支持上下按键选中并可以回车，填充相关信息"><a href="#Dropdown-下拉菜单组件支持上下按键选中并可以回车，填充相关信息" class="headerlink" title="Dropdown 下拉菜单组件支持上下按键选中并可以回车，填充相关信息"></a>Dropdown 下拉菜单组件支持上下按键选中并可以回车，填充相关信息</h2><p>vue动态搜索组件.png<br><img src="/images/pasted-1.png" alt="upload successful"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Dropdown</span><br><span class="line"></span><br><span class="line">        class=&quot;auto-complete-dropdown&quot;        </span><br><span class="line"></span><br><span class="line">        width=&quot;500&quot;</span><br><span class="line"></span><br><span class="line">        placement=&quot;bottom-start&quot;</span><br><span class="line"></span><br><span class="line">        @on-click=&quot;invoiceDropdownClick&quot;  </span><br><span class="line"></span><br><span class="line">        @on-visible-change=&quot;visivle&quot;</span><br><span class="line"></span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input href=&quot;javascript:void(0)&quot; @keyup.enter=&quot;invoiceDropdownClick(listSelectedName)&quot; @keyup.up=&quot;upClick&quot; @keyup.down=&quot;downClick&quot;  class=&quot;auto-complete-input&quot;  placeholder=&quot;请输入名称&quot; v-model=&quot;invoiceDetails.purchaserName&quot; type=&quot;text&quot;&gt;    &lt;DropdownMenu slot=&quot;list&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;DropdownItem ref=&quot;list&quot; :selected=&quot;listSelected===index?true:false&quot; :name=&quot;item.id&quot; v-for=&quot;(item,index) indata2&quot; :key=&quot;index&quot;&gt;&#123;&#123;item.customerName&#125;&#125;&lt;/DropdownItem&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/DropdownMenu&gt;</span><br><span class="line"></span><br><span class="line">&lt;/Dropdown&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line"></span><br><span class="line">    return&#123;</span><br><span class="line"></span><br><span class="line">              listSelected: -1, //默认选择名称列表项</span><br><span class="line"></span><br><span class="line">              listSelectedName: &quot;&quot;, //列表id、选中项ID</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要用到</p>
<p><code>@on-visible-change=&quot;visivle&quot;</code></p>
<p><code>@keyup.enter</code></p>
<p><code>@keyup.up</code></p>
<p><code>@keyup.down</code></p>
<p>原理是：在DropdownItem上绑定ref，通过操作$refs.xxx进行选中和回车事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//显示关闭下拉菜单重置选中项(可根据需求更改，默认不写此方法会再次打开下拉菜单会选中上一次选中的菜单项)</span><br><span class="line"></span><br><span class="line">visivle(e) &#123;</span><br><span class="line"></span><br><span class="line">  if (e === false) &#123;</span><br><span class="line"></span><br><span class="line">    this.listSelected = -1;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//listSelectedName接受的是组件:name属性的&quot;item.id&quot;的值。根据需求可能绑定的值不一样。这块的name是根据选中项的ID给其他输入框填充信息</span><br><span class="line"></span><br><span class="line">//下方向键</span><br><span class="line"></span><br><span class="line">downClick() &#123;</span><br><span class="line"></span><br><span class="line">  let listLength = this.$refs.list.length;</span><br><span class="line"></span><br><span class="line">  if (this.listSelected &lt; listLength - 1) &#123;</span><br><span class="line"></span><br><span class="line">    this.listSelected++;</span><br><span class="line"></span><br><span class="line">    this.listSelectedName = this.$refs.list[this.listSelected].name;</span><br><span class="line"></span><br><span class="line">    this.listVisible = false;</span><br><span class="line"></span><br><span class="line">  &#125; else &#123;</span><br><span class="line"></span><br><span class="line">    this.listSelected = 0;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//上方向键</span><br><span class="line"></span><br><span class="line">upClick() &#123;</span><br><span class="line"></span><br><span class="line">  let listLength = this.$refs.list.length;</span><br><span class="line"></span><br><span class="line">  if (this.listSelected &lt;= 0) &#123;</span><br><span class="line"></span><br><span class="line">    this.listSelected = listLength - 1;</span><br><span class="line"></span><br><span class="line">  &#125; else &#123;</span><br><span class="line"></span><br><span class="line">    if (this.listSelected &lt; listLength) &#123;</span><br><span class="line"></span><br><span class="line">      this.listSelected--;</span><br><span class="line"></span><br><span class="line">      this.listSelectedName = this.$refs.list[this.listSelected].name;</span><br><span class="line"></span><br><span class="line">      this.listVisible = false;</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line"></span><br><span class="line">      this.listSelected = listLength - 1;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//回车事件、单击事件。回车事件和单击事件根据具体需求可以写成一个。</span><br><span class="line"></span><br><span class="line">invoiceDropdownClick(e)&#123;</span><br><span class="line"></span><br><span class="line">//将选中项ID传过来，通过for循环进行对比，匹配成功后给需要填充值的输入框填充对应的值即可。</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>iviewui</tag>
      </tags>
  </entry>
  <entry>
    <title>input输入框中文输入法处理</title>
    <url>/posts/65c462cc/</url>
    <content><![CDATA[<h3 id="功能要求"><a href="#功能要求" class="headerlink" title="功能要求"></a>功能要求</h3><p>比如一个搜索框，要求输入中文的时候请求，不能在拼音的时候请求。</p>
<p>MDN：</p>
<ul>
<li><p><strong>compositionstart</strong><br>  当浏览器有非直接的文字输入时，compositionstart事件会以同步模式触发</p>
</li>
<li><p><strong>compositionend</strong><br>  当浏览器时直接的文字输入时，compositionend会以同步模式触发</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Input中文处理&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input id=&quot;input1&quot; type=&quot;text&quot; placeholder=&quot;输入中文&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var a = document.getElementById(&#x27;input1&#x27;);</span><br><span class="line"></span><br><span class="line">        a.addEventListener(&#x27;compositionstart&#x27;,function (e) &#123;</span><br><span class="line">            console.log(&quot;开始拼写&quot;);</span><br><span class="line">            console.log(e.target.value);</span><br><span class="line">        &#125;);</span><br><span class="line">        a.addEventListener(&#x27;compositionend&#x27;,function (e) &#123;</span><br><span class="line">            console.log(&quot;拼写结束&quot;);</span><br><span class="line">            console.log(e.target.value)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//console输出</span></span><br><span class="line">开始拼写</span><br><span class="line"></span><br><span class="line">拼写结束</span><br><span class="line">啊</span><br></pre></td></tr></table></figure>
<p><code>使用这两个方法就可以处理中文输入法问题，可以在这两个函数里写一些操作。可以把Dom复制一份体会一下。</code></p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>html-webpack-plugin使用问题</title>
    <url>/posts/c0527db0/</url>
    <content><![CDATA[<h4 id="html-webpack-plugin使用问题"><a href="#html-webpack-plugin使用问题" class="headerlink" title="html-webpack-plugin使用问题"></a>html-webpack-plugin使用问题</h4><p>  中文文档：<a href="https://webpack.docschina.org/plugins/html-webpack-plugin/#src/components/Sidebar/Sidebar.jsx">Html-webpack-plugin</a> </p>
<p>  安装<code>npm install --save-dev html-webpack-plugin</code></p>
<p>  配置<code>webpack.config.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">var path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#x27;index.js&#x27;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#x27;./dist&#x27;),</span><br><span class="line">    filename: &#x27;index_bundle.js&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [new HtmlWebpackPlugin()]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p>如果使用默认生成的.html文档时，它是没有需要挂载<code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code>。比如Vue和React需要在.html里写一段需要挂载div，所以需要设置模板。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line">var path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#x27;index.js&#x27;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#x27;./dist&#x27;),</span><br><span class="line">    filename: &#x27;index_bundle.js&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">        template:&quot;public/index.html&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p>设置好模板后，打包如果出现下面的错误</p>
<pre>
ERROR in Template execution failed: ReferenceError: BASE_URL is not defined

ERROR in   ReferenceError: BASE_URL is not defined
</pre>



<p><a href="https://www.picb.cc/image/gr9CrX"><img src="https://t1.picb.cc/uploads/2019/07/30/gr9CrX.png" alt="gr9CrX.png"></a></p>
<p>就需要配置一个 <code>html-loader</code> loader，对html文件进行转换。<br>文档处(拉到最下面):<a href="https://github.com/jantimon/html-webpack-plugin/blob/master/docs/template-option.md">The template option</a></p>
<p><code>However this also means that in the following example webpack will use the html loader for your template. This will cause html minification and it will also disable the ejs fallback loader.</code></p>
<pre>
{
  module: {
    loaders: [
      {
        test: /\.html$/,
        loader: 'html-loader'
      }],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: 'src/index.html'
    })
  ]
}
</pre>



<p>安装<code>npm install html-loader -D</code>，配置好后，再打包就没问题了。<br>具体是什么原因导致的不清楚，没查出来。望有大佬不吝赐教。</p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>使用WebStorm，alias别名 @不生效，解决方案。</title>
    <url>/posts/a0644aca/</url>
    <content><![CDATA[<h2 id="使用WebStorm，alias别名-Vite-不生效，解决方案。"><a href="#使用WebStorm，alias别名-Vite-不生效，解决方案。" class="headerlink" title="使用WebStorm，alias别名 @Vite 不生效，解决方案。"></a>使用WebStorm，alias别名 @Vite 不生效，解决方案。</h2><p><code>vite.config.js</code>同级配置新增json文件,添加<code>jsconfig.json</code>或<code>tsconfig.json</code>，看你使用js还是ts。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;src/*&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>即可</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>webstorm</tag>
        <tag>vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>第一次玩这博客，经理了一下午琢磨，现在已经完成了。只不过需要后续的完善。</p>
<p>有时间继续吧！</p>
]]></content>
  </entry>
  <entry>
    <title>父子组件通信：pros、$emit</title>
    <url>/posts/8ed1fdd7/</url>
    <content><![CDATA[<h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    我是父组件</span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--父组件监听子组件触发的say方法，调用自己的parentSay方法--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--通过:msg将父组件的数据传递给子组件--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">children</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">say</span>=<span class="string">&quot;parentSay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">children</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Children</span> <span class="keyword">from</span> <span class="string">&#x27;./children.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span> () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&#x27;hello, children&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 参数就是子组件传递出来的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">parentSay</span>(<span class="params">msg</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(msg) <span class="comment">// hello, parent</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 引入子组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">children</span>: <span class="title class_">Children</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;children&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;say&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我是子组件</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        父组件对我说：&#123;&#123;msg&#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//父组件通过props属性传递进来的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">msg</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">data</span> () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">childrenSay</span>: <span class="string">&#x27;hello, parent&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 子组件通过emit方法触发父组件中定义好的函数，从而将子组件中的数据传递给父组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">say</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.$emit(<span class="string">&#x27;say&#x27;</span> , <span class="variable language_">this</span>.<span class="property">childrenSay</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>vue父子通信.png<br><img src="/images/pasted-0.png" alt="upload successful"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>vue的父子组件间通信可以总结成一句话：父组件通过 prop 给子组件下发数据，子组件通过$emit触发事件给父组件发送消息，即 prop 向下传递，事件向上传递。</p>
<p>PS:<code>看了一下dom简介明了。转：https://segmentfault.com/a/1190000014381699</code></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
